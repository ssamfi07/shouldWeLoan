x$res.ds %>% mutate(Total=probLeft+probRope+probRight,Winner = max(probLeft,probRope,probRight))
# a check
x$res.ds %>% rowwise() %>% mutate(Total=probLeft+probRope+probRight,Winner = max(probLeft,probRope,probRight))
# a check
x$res.ds %>% rowwise() %>% mutate(Total=probLeft+probRope+probRight,Winner = which.max(probLeft,probRope,probRight))
# a check
x$res.ds %>% rowwise() %>% mutate(Total=probLeft+probRope+probRight,Winner = which.max(c(probLeft,probRope,probRight)))
# a check
x$res.ds %>% rowwise() %>% mutate(Total=probLeft+probRope+probRight,Winner = max(probLeft,probRope,probRight))
# a check
x$res.ds %>% rowwise() %>%
mutate(Total=probLeft+probRope+probRight,Winner = which.max(probLeft,probRope,probRight))
# a check
x$res.ds %>% rowwise() %>%
mutate(Total=probLeft+probRope+probRight,Winner = which.max(probLeft,probRope,probRight)))
# a check
x$res.ds %>% rowwise() %>%
mutate(Total=probLeft+probRope+probRight,Winner = which.max(c(probLeft,probRope,probRight)))
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.6+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.6+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp()
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.5+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.5+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp()
x
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.5+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.45+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp()
x
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.5+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.49+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp()
x
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.4+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.39+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp()
x
resRope <- simulateExp()
save(resRope,file="resRope.Rdata")
resRope
kbl(resRope$res.ds)
kbl(resRope$res.raw,format="latex")
kbl(resRope$res.raw,format="latex",digits=3)
kbl(resRope$res.ds,format="latex",digits=3)
resRope
# a check
resRope$res.ds %>% rowwise() %>%
mutate(Total=probLeft+probRope+probRight,Winner = which.max(c(probLeft,probRope,probRight)))
rdirichlet(20, c(1,1,1) )
ddirichlet(c(.1,.2,.7), c(1,1,1))
x <- simulateExp(n.ds=1)
BayesianSignTest <- function(diffVector,rope_min,rope_max) {
library(MCMCpack)
samples <- 3000
# z0 = 0
diffVector <- c(0,diffVector)
#for the moment we implement the sign test.
# how many "negative", "practical equiv", and "positive" differences there are
nLeft <- sum(diffVector < rope_min)
nRight <- sum(diffVector > rope_max)
nRope <- length(diffVector) - nLeft - nRight
alpha <- c(nLeft,nRope,nRight)/length(diffVector)
alpha <- alpha+0.0001
print(head(alpha))
alpha.res <- colMeans(MCMCpack::rdirichlet(30000, alpha))
print(head(alpha.res))
results = list ("probLeft"=alpha.res[1], "probRope"=alpha.res[2],
"probRight"=alpha.res[3])
return (results)
}
# 10 data sets, 2 models, 1x10 cv
simulateExp <- function(n.ds=10,n.ms=2,n.folds=10) {
res.all <- list("negative"=0,"rope"=0,"positive"=0)
res.ds <- as_tibble(matrix(0,nrow=n.ds,ncol=3,dimnames=list(NULL,c("probLeft","probRope","probRight"))))
res.raw <- as_tibble(matrix(0,ncol=n.folds,nrow=n.ds*n.ms,dimnames=list(NULL,paste("Fold",1:n.folds,sep=""))))
for(i in 1:n.ds) {
ds.factor <- 0.05*i
set.seed(i)
res.raw[2*i-1,] <- as.list(runif(10,min=0.4+ds.factor))
set.seed(i+1)
res.raw[2*i,] <- as.list(runif(10,min=0.39+ds.factor))
res.ds[i,] <- BayesianSignTest(res.raw[2*i-1,]-res.raw[2*i,],-0.01,0.01)
j <- which.max(res.ds[i,])
res.all[[j]] <-  res.all[[j]] + 1
}
list(res.raw = res.raw, res.ds = res.ds,res.all=res.all)
}
x <- simulateExp(n.ds=1)
print(alpha)
BayesianSignTest <- function(diffVector,rope_min,rope_max) {
library(MCMCpack)
samples <- 3000
# z0 = 0
diffVector <- c(0,diffVector)
#for the moment we implement the sign test.
# how many "negative", "practical equiv", and "positive" differences there are
nLeft <- sum(diffVector < rope_min)
nRight <- sum(diffVector > rope_max)
nRope <- length(diffVector) - nLeft - nRight
alpha <- c(nLeft,nRope,nRight)/length(diffVector)
alpha <- alpha+0.0001
print(alpha)
alpha.res <- colMeans(MCMCpack::rdirichlet(30000, alpha))
print(alpha.res)
results = list ("probLeft"=alpha.res[1], "probRope"=alpha.res[2],
"probRight"=alpha.res[3])
return (results)
}
x <- simulateExp(n.ds=1)
x <- simulateExp(n.ds=4)
plotRanking(pvalues=test$corrected.pval, summary=test$summary, alpha=0.05)
test <- postHocTest(myd2, test="friedman", correct="finner", use.rank=TRUE)
test
round(test$corrected.pval,3)
aq1 <- select(aq,Month,Day,Temp)
aq
library(tidyverse)
aq1 <- select(aq,Month,Day,Temp)
aq %>% select(Month)
library(datasets)
data(airquality)
airquality <- as_tibble(airquality)
aq <- relocate(airquality,c(Month,Day,Temp,Wind,Solar.R,Ozone))
aq <- mutate(aq,Month=factor(Month,ordered=TRUE,levels=1:12,labels=month.name[1:12]),
Day=factor(Day,ordered=TRUE),
Temp=(5/9)*(Temp-32))
aq
aq1 <- select(aq,Month,Day,Temp)
select(aq,"Month")
dettach(MASS)
detach(MASS)
unloadNamespace(MASS)
aq1 <- dplyr::select(aq,Month,Day,Temp)
aq1
complete(aq1,Month,Day)
aq2 <- complete(aq1,Month,Day)
aq2 %>% count()
aq2 %>% count(is_na())
aq2 %>% count(is_na(.))
aq
aq %>$ rowwise()
aq %>% rowwise()
aq %>% rowwise() %>% mutate(Max=which.max(.))
aq %>% rowwise() %>% mutate(Max=~ which.max(.))
aq %>% rowwise() %>% mutate(Max=which.max(.))
aq %>% rowwise() %>% select(-Month,-Day) %>% mutate(Max=which.max(.))
aq %>% select(-Month,-Day) %>% rowwise() %>% mutate(Max=which.max(.))
aq %>% dplyr::select(-Month,-Day) %>% rowwise() %>% mutate(Max=which.max(.))
aq
aq %>% rowwise() %>% summarise(nNAs = count(is.na(.)))
aq %>% rowwise() %>% summarise(nNAs = sumt(is.na(.)))
aq %>% rowwise() %>% summarise(nNAs = sum(is.na(.)))
aq %>% rowwise() %>% summarise(nNAs = ~ sum(is.na(.)))
aq %>% rowwise() %>% summarise(nNAs = ~ sum(is.na(.x)))
aq %>% rowwise() %>% summarise(nNAs = sum(is.na(.x)))
aq %>% rowwise() %>% summarise(nNAs = sum(is.na()))
aq %>% rowwise() %>% summarise(nNAs = sum(is.na(.)))
aq %>% summarise(nNAs = rowSums(is.na(.)))
aq %>% rowwise() %>%
mutate(count_na = sum(is.na(.)))
aq %>% rowwise() %>%
mutate(count_na = sum(is.na(c_across(Temp,Wind,Solar.R,Ozone))))
aq %>% rowwise() %>%
mutate(count_na = sum(is.na(c_across(Temp:Ozone))))
aq %>% mutate(nNAs = rowSums(is.na(.)))
aq %>% mutate(count.NAs = rowSums(is.na(.)))
aq %>% rowwise() %>%
mutate(count.NAs = sum(is.na(c_across(Temp:Ozone))))
library(xgboost)
library(lightgbm)
install.packages("lightgbm")
library(lightgbm)
library(tidyverse)
Set guides for each scale
5.57*100
5.57*100 / 5.32
4.32/8
5.57/8
0.7*100
0.7*100/0.54
0.69625*100/0.54
5.57-5.32
(5.57-5.32)/5.32
(5.8-5.59)/5.59
library(tidyverse)
map(letters[1:5],paste(.,sep="+"))
map(letters[1:5],paste,sep="+")
map(1:5,sum)
map_dbl(1:5,sum)
1:10 %>%
map(rnorm, n = 10) %>%  # output a list
map_dbl(mean)           # output an atomic vector
data("iris")
dist(iris)
library(tidyverse)
iris1 <- irisi1 %>% select(-Species)
iris1 <- iris %>% select(-Species)
iris1
class(iris1)
dist(iris1)
dist(iris1,diag=TRUE)
dist(iris1,upper =TRUE)
dist(iris1)
head(dist(iris1))
glimpse(dist(iris1))
glance(dist(iris1))
dist_iris <- dist(iris1)
class(dist_iris)
daisy(iris1)
library(cluster)
daisy(iris1)
dist_iris
dist_iris[1:5]
dist_iris[1:5,]
iris1 <- iris %>% select(-Species) %>% slice(1:5)
iris1
dist(iris1)
daisy(iris)
dist(iris)
iris %>% slice(5)
iris %>% slice(1:5)
daisy(iris %>% slice(1:5))
dist(iris1,method="maximum")
library(tidymodels)
iris %>% mutate_all(scale)
iris_num <- iris %>% select(-Species)
iris_num %>% mutate_all(scale)
iris %>% select(-Species) %>% mutate_all(scale)
summary(iris %>% select(-Species) %>% mutate_all(scale))
iris2 <-  iris %>% select(-Species) %>% mutate_all(scale)
k3 <- kmeans(iris2,centers=3)
k3
library(factoextra)
fviz_cluster(k3,iris2)
silhouette(k3$cluster,dist(iris2))
si_coefs_k3 <- silhouette(k3$cluster,dist(iris2))
fviz_silhouette(si_coefs_k3) + coord_flip()
fviz_nbclust(iris2, kmeans, method = "silhouette")
fviz_nbclust(iris2, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
fviz_nbclust(iris2, kmeans, method = "wss")
27*10 + 200
22*10+700
library(tidyverse)
library(cluster)
library(factoextra)
library(dbscan)
data(iris)
iris1 <- iris %>% select(-Species) %>% slice(1:5)
iris1
dist(iris1)
?dist
dist(iris1,p=1)
dist(iris1,method="manhattan")
iris1
dist(iris1,method="euclidean",p=4)
dist(iris1,method="minkowski",p=4)
dist(iris1,method="maximum")
iris1
iris2 <- iris %>% select(-Species) %>% mutate_all(scale)
summary(iris2)
k3 <- kmeans(iris2,centers=3)
k3
k3 <- kmeans(iris2,centers=3)
k3
k3$betweenss
k3$iter
fviz_cluster(k3,iris2)
si_coefs_k3 <- silhouette(k3$cluster,dist(iris2))
si_coefs_k3
summary(si_coefs_k3)
fviz_silhouette(si_coefs_k3)
fviz_silhouette(si_coefs_k3) + coord_flip()
fviz_nbclust(iris2, kmeans, method = "silhouette")
fviz_nbclust(iris2, kmeans, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
# pam
pam3 <- pam(iris2,3)
fviz_cluster(pam3,iris2)
fviz_cluster(pam3,iris2,metric="manhattan")
# pam
pam3 <- pam(iris2,3,metric="manhattan")
fviz_cluster(pam3,iris2)
pam3
si_coefs_pam3 <- silhouette(pam3$cluster,dist(iris2))
fviz_silhouette(si_coefs_pam3) + coord_flip()
fviz_nbclust(iris2, pam, method = "silhouette")
fviz_nbclust(iris2, pam, method = "silhouette")
fviz_nbclust(iris2, pam, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
# clara
clara3 <- clara(iris2,3)
fviz_cluster(clara3,iris2)
si_coefs_clara3 <- silhouette(clara3$cluster,as.matrix(dist(iris2)))
fviz_silhouette(si_coefs_clara3) + coord_flip()
fviz_nbclust(iris2, clara, method = "silhouette")
fviz_nbclust(iris2, clara, method = "wss") +
geom_vline(xintercept = 3, linetype = 2)
dbscan09 <- dbscan(iris2,eps=0.9)
fviz_cluster(dbscan09,iris2)
dbscan09 <- dbscan(iris2,minPts=3,eps=0.9)
fviz_cluster(dbscan09,iris2)
dbscan09 <- dbscan(iris2,minPts=3,eps=0.5)
fviz_cluster(dbscan09,iris2)
dbscan09 <- dbscan(iris2,minPts=10,eps=1.5)
fviz_cluster(dbscan09,iris2)
dm <- dist(iris2)
hclust.sing <- hclust(dm,"single")
fviz_dend(hclust.sing,k=3)
fviz_dend(hclust.sing,k=4)
c <- cutree(hclust.sing,k=3)
c
si_coefs_hclust_sing_3 <- silhouette(c,dm)
fviz_silhouette(si_coefs_hclust_sing_3) + coord_flip()
hclust.compl <- hclust(dm,"complete")
fviz_dend(hclust.compl,k=3)
c <- cutree(hclust.compl,k=3)
si_coefs_hclust_compl_3 <- silhouette(c,dm)
fviz_silhouette(si_coefs_hclust_compl_3) + coord_flip()
hclust.avg <- hclust(dm,"average")
fviz_dend(hclust.avg,k=3)
c <- cutree(hclust.avg,k=3)
si_coefs_hclust_avg_3 <- silhouette(c,dm)
fviz_silhouette(si_coefs_hclust_avg_3) + coord_flip()
data("PimaIndiansDiabetes",package="mlbench")
library(tidyverse)
library(tidymodels)
data("PimaIndiansDiabetes",package="mlbench")
str(PimaIndiansDiabetes)
pima_split <- PimaIndiansDiabetes %>%
initial_split(prop=.7,strata=diabetes) #rsample
set.seed(1234)
pima_split <- PimaIndiansDiabetes %>%
initial_split(prop=.7,strata=diabetes) #rsample
pima_split
train <- training(pima_split)
test <- testing(pima_split)
str(train)
str(test)
summary(train$diabetes)
187/350
summary(test$diabetes)
150/81
81/150
summary(train)
pima_rec <-  recipe(diabetes ~.,train)
pima_rec
pima_rec <- pima_rec %>% step_normalize(all_numeric_predictors()) %>% prep()
pima_rec
pima_train <- pima_rec %>% bake(new_data=NULL)
pima_test <- pima_rec %>% bake(new_data=test)
summary(pima_train)
summary(pima_test)
library(kknn)
model_knn <- nearest_neighbor(mode="classification") #,neighbors=5)
model_knn
knn_fit <- model_knn %>%
fit(diabetes ~ ., data = pima_train)
knn_fit
preds <- predict(knn_fit,pima_test)
preds
knn_preds <-
pima_test %>% dplyr::select(diabetes) %>%
bind_cols(predict(knn_fit,pima_test))
knn_preds
knn_preds %>% conf_mat(diabetes,.pred_class) %>% autoplot(type="heatmap")
knn_preds %>% conf_mat(diabetes,.pred_class)
knn_preds %>% accuracy(truth=diabetes,estimate=.pred_class)
knn_preds <-
pima_test %>% dplyr::select(diabetes) %>%
bind_cols(predict(knn_fit,pima_test)) %>%
bind_cols(predict(knn_fit,pima_test,type="prob"))
knn_preds
levels(pima_train$diabetes)
levels(revel(pima_train$diabetes,"pos"))
levels(rlevel(pima_train$diabetes,"pos"))
levels(relevel(pima_train$diabetes,"pos"))
knn_preds %>%
roc_auc(truth=relevel(diabetes,"pos"),estimate=.pred_pos)
roc_curve(knn_preds,relevel(diabetes,"pos"),.pred_pos)
roc_curve(knn_preds,relevel(diabetes,"pos"),.pred_pos)  %>% autoplot()
roc_curve(knn_preds,diabetes,.pred_pos)  %>% autoplot()
library(discrim)
library(klaR)
model_nb <- naive_Bayes(mode="classification",engine="klaR")
model_nb
nb_fit <- model_nb %>%
fit(diabetes ~ ., data = pima_train)
nb_fit
nb_preds <-
pima_test %>% dplyr::select(diabetes) %>%
bind_cols(predict(nb_fit, pima_test)) %>%
bind_cols(predict(nb_fit, pima_test, type = "prob"))
model_nb <- naive_Bayes(mode="classification",
engine="klaR",
Laplace = 0.0001)
nb_fit <- model_nb %>%
fit(diabetes ~ ., data = pima_train)
nb_preds <-
pima_test %>% dplyr::select(diabetes) %>%
bind_cols(predict(nb_fit, pima_test)) %>%
bind_cols(predict(nb_fit, pima_test, type = "prob"))
nb_preds %>% conf_mat(diabetes,.pred_class) %>%
autoplot(type="heatmap")
nb_preds %>% accuracy(truth=diabetes,estimate=.pred_class)
knn_preds %>% accuracy(truth=diabetes,estimate=.pred_class)
nb_preds %>%
roc_auc(truth=relevel(diabetes,"pos"),estimate=.pred_pos)
knn_preds %>%
roc_auc(truth=relevel(diabetes,"pos"),estimate=.pred_pos)
roc_curve(nb_preds,relevel(diabetes,"pos"),.pred_pos) %>%
autoplot()
load("tae.Rdata")
setwd("~/Dropbox/MyStuff/Teaching/DMI/2223/praticas/HandsOn/HandsOn-4")
load("tae.Rdata")
tae
summary(tae)
load("nursery.Rdata")
summary(nursery)
setwd("~/Dropbox/MyStuff/Teaching/DMI/2324/praticas/HandsOn/HandsOn-4")
setwd("~/Dropbox/MyStuff/Teaching/DMI/2324/praticas/HandsOn/HandsOn-4-kNN_NB")
library(tidyverse)
load('tae.Rdata')
write_csv(tae,file="tae.csv")
load('nursery.Rdata')
write_csv(nursery,file="nursery.csv")
setwd("/Users/rpribeiro/Dropbox/MyStuff/Teaching/DMI/2324/projeto/enunciado/to-loan-or-not-to-loan-that-is-the-question-ac2223")
setwd("/Users/rpribeiro/Dropbox/MyStuff/Teaching/DMI/2324/projeto/enunciado/to-loan-or-not-to-loan-that-is-the-question-ac2223")
library(tidyverse)
loan <- read_csv('loan_comp.csv')
setwd("/Users/rpribeiro/Dropbox/MyStuff/Teaching/DMI/2324/projeto/enunciado/ficheiros_competicao_dev")
loan_train <- read_csv("loan_dev.csv")
loan_train <- read_csv("loan_dev.csv",sep=";")
View(loan_train)
View(loan_train)
354+328
View(loan)
